// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Room {
    id               Int          @id @default(autoincrement())
    name             String
    description      String
    pricePerNight    Float
    address          String
    locationId       Int
    userId           String
    guestCapacity    Int
    numOfBeds        Int
    isInternet       Boolean      @default(false)
    isBreakfast      Boolean      @default(false)
    isAirConditioned Boolean      @default(false)
    isPetsAllowed    Boolean      @default(false)
    isRoomCleaning   Boolean      @default(false)
    ratings          Float        @default(0)
    numOfReviews     Int          @default(0)
    category         RoomCategory
    createdAt        DateTime     @default(now())

    // Relations
    location Location @relation(fields: [locationId], references: [id])
    user     User     @relation(fields: [userId], references: [id])
    images   Image[]
    reviews  Review[]
}

model Image {
    id       Int    @id @default(autoincrement())
    publicId String
    url      String
    roomId   Int
    Room     Room   @relation(fields: [roomId], references: [id])
}

model Review {
    id      Int    @id @default(autoincrement())
    rating  Float
    comment String
    roomId  Int
    userId  String
    Room    Room   @relation(fields: [roomId], references: [id])
    User    User   @relation(fields: [userId], references: [id])
}

model Location {
    id               Int     @id @default(autoincrement())
    type             String
    coordinates      Float[]
    formattedAddress String
    city             String
    state            String
    zipCode          String
    country          String
    rooms            Room[]
}

enum RoomCategory {
    King
    Single
    Twins
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String    @id @default(cuid())
    email               String?   @unique
    password            String?   @map("password")
    avatarPublicId      String?
    avatarUrl           String?
    role                String    @default("user")
    createdAt           DateTime  @default(now())
    resetPasswordToken  String?
    resetPasswordExpire DateTime?
    emailVerified       DateTime?
    image               String?

    // Relations
    accounts Account[]
    sessions Session[]
    Post     Post[]
    Room     Room[]
    Review   Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
